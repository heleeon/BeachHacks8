{"skills": ["Python", "Data Science", "Machine Learning"], "job_fit_score": 80, "job_description": "asdf", "resume_text": "{\\rtf1\\ansi\\ansicpg1252\\cocoartf2821\n\\cocoatextscaling0\\cocoaplatform0{\\fonttbl\\f0\\fswiss\\fcharset0 Helvetica-Bold;\\f1\\fswiss\\fcharset0 Helvetica;\\f2\\fmodern\\fcharset0 Courier-Bold;\n\\f3\\froman\\fcharset0 Times-Roman;\\f4\\fmodern\\fcharset0 Courier;}\n{\\colortbl;\\red255\\green255\\blue255;\\red0\\green0\\blue0;\\red0\\green0\\blue0;\\red255\\green255\\blue255;\n\\red0\\green0\\blue0;\\red255\\green255\\blue255;\\red255\\green255\\blue255;}\n{\\*\\expandedcolortbl;;\\cssrgb\\c0\\c0\\c0;\\cssrgb\\c0\\c1\\c1;\\cssrgb\\c100000\\c100000\\c99985;\n\\cssrgb\\c0\\c1\\c1;\\cssrgb\\c100000\\c100000\\c99985;\\cssrgb\\c100000\\c100000\\c100000;}\n\\margl1440\\margr1440\\vieww16900\\viewh18520\\viewkind0\n\\pard\\tx720\\tx1440\\tx2160\\tx2880\\tx3600\\tx4320\\tx5040\\tx5760\\tx6480\\tx7200\\tx7920\\tx8640\\pardirnatural\\qc\\partightenfactor0\n\n\\f0\\b\\fs48 \\cf0 Intro to Flask\n\\f1\\b0\\fs24 \\\n\\pard\\tx720\\tx1440\\tx2160\\tx2880\\tx3600\\tx4320\\tx5040\\tx5760\\tx6480\\tx7200\\tx7920\\tx8640\\pardirnatural\\partightenfactor0\n\\cf0 Installing Flask\n\\f0\\b\\fs28 \\\n$ pip install flask\\\n\\\n\n\\f1\\b0\\fs24 Running Flask (localhost)\n\\f0\\b\\fs28 \\\n$ python3 app.py\\\n\\\n\n\\f1\\b0\\fs24 Running Flask from an IP address (localhost only runs on your local computer, while this will run on any computer in the network)\\\n\n\\f0\\b\\fs28 $ flask run \\'97host <IP>\\\n\\\n\\pard\\tx720\\tx1440\\tx2160\\tx2880\\tx3600\\tx4320\\tx5040\\tx5760\\tx6480\\tx7200\\tx7920\\tx8640\\pardirnatural\\partightenfactor0\n\n\\fs36 \\cf0 Flask Big Picture\n\\f1\\b0\\fs24 \\\nclient \\'97-> server [route = /id] \\'97> view functions [func for \\'91/id\\'92]\\\nclient makes a request to the Flask server. Flask server creates a request object (encapsulates http request) for the view function\\\nThe view function sends a response back to the Flask server (string)\\\n\\\n__________________________________________________________________________________________________\n\\f0\\b\\fs28 \\\n\n\\fs36 Flask Syntax\\\n\\pard\\tx720\\tx1440\\tx2160\\tx2880\\tx3600\\tx4320\\tx5040\\tx5760\\tx6480\\tx7200\\tx7920\\tx8640\\pardirnatural\\partightenfactor0\n\n\\f1\\b0\\fs24 \\cf0 from flask import Flask\\\n\\\napp = Flask(__name__)\\\n@app.route(\\'91/\\'91)\\\ndef function_name():\\\n\treturn \\'92return function task back when route is called by client\\'92\\\n\\\nif __name__ == \\'91__main__\\'92:\\\n\tapp.run(debug=True)\\\n\\\n__________________________________________________________________________________________________\\\n\\pard\\tx720\\tx1440\\tx2160\\tx2880\\tx3600\\tx4320\\tx5040\\tx5760\\tx6480\\tx7200\\tx7920\\tx8640\\pardirnatural\\partightenfactor0\n\n\\f0\\b\\fs36 \\cf0 Requests library\\\n\\pard\\tx720\\tx1440\\tx2160\\tx2880\\tx3600\\tx4320\\tx5040\\tx5760\\tx6480\\tx7200\\tx7920\\tx8640\\pardirnatural\\partightenfactor0\n\n\\f1\\b0\\fs24 \\cf0 Installing requests \n\\f0\\b\\fs28 \\\n$ pip install requests\\\n\\pard\\tx720\\tx1440\\tx2160\\tx2880\\tx3600\\tx4320\\tx5040\\tx5760\\tx6480\\tx7200\\tx7920\\tx8640\\pardirnatural\\partightenfactor0\n\n\\fs36 \\cf0 \\\n\\pard\\tx720\\tx1440\\tx2160\\tx2880\\tx3600\\tx4320\\tx5040\\tx5760\\tx6480\\tx7200\\tx7920\\tx8640\\pardirnatural\\partightenfactor0\n\n\\f1\\b0\\fs24 \\cf0 Used for making HTTP requests (e.g. GET\\'92, \\'91PUT\\'92, \\'91DELETE\\'92 and \\'91POST\\'92)\\\n\t\n\\fs28 - Sending a \\'91\n\\f0\\b GET\n\\f1\\b0 \\'92 request to retrieve data from an API\\\n\t- Sending a \\'91\n\\f0\\b POST\n\\f1\\b0 \\'92 request to send data (like form data or JSON) to an API)\n\\fs24 \t\\\n\\pard\\tx720\\tx1440\\tx2160\\tx2880\\tx3600\\tx4320\\tx5040\\tx5760\\tx6480\\tx7200\\tx7920\\tx8640\\pardirnatural\\partightenfactor0\n\n\\f0\\b \\cf0 Requests\n\\f1\\b0  makes it simple to interact with APIs, send data, and retrieve responses from web servers\\\nOtherwise we\\'92d have to deal with raw HTTP requests (complex)\\\n\\\n\n\\f0\\b\\fs36 \\'91GET\\'92 Request Syntax \\\n\\pard\\pardeftab720\\sa240\\partightenfactor0\n\n\\f2\\fs26 \\cf0 \\expnd0\\expndtw0\\kerning0\nrequests.get(url, params=None, **kwargs)\n\\f3\\b0\\fs24 : Send a GET request.\n\\f0\\b\\fs36 \\kerning1\\expnd0\\expndtw0 \\\n\\pard\\tx720\\tx1440\\tx2160\\tx2880\\tx3600\\tx4320\\tx5040\\tx5760\\tx6480\\tx7200\\tx7920\\tx8640\\pardirnatural\\partightenfactor0\n\n\\f1\\b0\\fs24 \\cf0 \t# EXAMPLE:\\\n\t# Send a GET request to the specified URL\\\n\tresponse = \n\\fs28 requests.\n\\f0\\b get\n\\f1\\b0 ('\n\\f0\\b https://jsonplaceholder.typicode.com/posts\n\\f1\\b0 ')\n\\fs24 \\\n\\\n\t# Check if the request was successful\\\n\tif response.status_code == 200:\\\n    \t\tprint(\"Success!\")\\\n    \t\tprint(response.text)  # The content of the response\\\n\telse:\\\n    \t\tprint(\"Failed to retrieve data!\")\\\n\\\n\n\\f0\\b\\fs36 Handling JSON Data\n\\f1\\b0\\fs24 \\\n\t# Send a GET request to a URL that returns JSON\\\n\t# Parse the response JSON into a Python dictionary\\\n\tjson_data = response.json()\\\n\\\n\t# Accessing the data\\\n\tfor post in json_data:\\\n    \t\tprint(post['title'])\\\n\\\n\n\\f0\\b\\fs36 \\'91POST\\'92 Request Syntax \\\n\\pard\\pardeftab720\\sa240\\partightenfactor0\n\n\\f2\\fs26 \\cf0 \\expnd0\\expndtw0\\kerning0\nrequests.post(url, data=None, json=None, **kwargs)\n\\f3\\b0\\fs24 : Send a POST request (with form data or JSON).\\\n\\pard\\tx720\\tx1440\\tx2160\\tx2880\\tx3600\\tx4320\\tx5040\\tx5760\\tx6480\\tx7200\\tx7920\\tx8640\\pardirnatural\\partightenfactor0\n\n\\f1 \\cf0 \\kerning1\\expnd0\\expndtw0 \t# EXAMPLE:\\\n\t# Define the data you want to send\\\n\t\n\\f0\\b\\fs28 data\n\\f1\\b0\\fs24  = \\{\\\n    \t\t'title': 'foo',\\\n    \t\t'body': 'bar',\\\n    \t\t'userId': 1\\\n\t\\}\\\n\t# Send a POST request\\\n\tresponse = \n\\fs28 requests\n\\f0\\b .post\n\\f1\\b0 ('\n\\f0\\b https://jsonplaceholder.typicode.com/posts', json=data)\n\\f1\\b0\\fs24 \\\n\\\n\t# Check the response\\\n\tif response.status_code == 201:  # 201 is the status code for \"Created\"\\\n    \t\tprint(\"Data posted successfully!\")\\\n    \t\tprint(response.json())  # Return the JSON response\\\n\telse:\\\n    \t\tprint(\"Failed to post data!\")\\\n\\\n__________________________________________________________________________________________________\n\\f0\\b\\fs36 \\\nJsonify library\\\n\n\\f1\\b0\\fs24 Converts Python dictionaries into a JSON response format (object) \\\n\\\n__________________________________________________________________________________________________\\\n\n\\f0\\b\\fs36 \\\nBeachHacks Backend Pseudocode \n\\f1\\b0\\fs28 \\\n1. Initialize the Flask Application\\\n\n\\fs24    - Create a new Flask app instance.\\\n\\\n\n\\fs28 2. Define the Home Route (`/`)\\\n\t\n\\f4\\fs26 \\cf3 \\expnd0\\expndtw0\\kerning0\n@app.route(\\'93/\\'93)\n\\f1\\fs28 \\cf0 \\kerning1\\expnd0\\expndtw0 \\\n\n\\fs24      - When a user visits the root URL (`/`):\\\n     - Display a welcome message: \"Welcome to the Job Match App!\"\\\n\\\n\n\\fs28 3. Define the Upload Route (`/upload`)\\\n\n\\f4\\fs26 \\cf5 \\expnd0\\expndtw0\\kerning0\n\\outl0\\strokewidth0 \\strokec6 \t@app.route('/upload', methods=['POST'])\\\n\\pard\\pardeftab720\\partightenfactor0\n\\cf5 \\strokec6 \tdef upload_file():\\\n\t\t# Check if a file was uploaded\\\n\t\t# Save the file\\\n\t\t# Process the file using spaCy\\\n\t\t\tresume_text = extract_text(file_path)\t//sep func for logic\\\n\t\t# Return analysis data (response)\\\n\t\t\tresponse = \\{\\'91skills\\'92 : [\\'91Python\\'92,\\'92Data Science\\'92\\'85], \\'91job_fit_score\\'92 : 75\\}\\\n\t\t\treturn jsonify(response)\\cf7 \\strokec7 \\\n\\pard\\tx720\\tx1440\\tx2160\\tx2880\\tx3600\\tx4320\\tx5040\\tx5760\\tx6480\\tx7200\\tx7920\\tx8640\\pardirnatural\\partightenfactor0\n\n\\f1\\fs28 \\cf0 \\kerning1\\expnd0\\expndtw0 \\outl0\\strokewidth0 \\\n\n\\fs24    - When the user uploads a file using a POST request to `/upload`:\\\n     1. Check if the request contains a file:\\\n        - If no file is provided (`'resume'` key missing from request):\\\n          - Return an error response with message: \"No file part\" and HTTP status 400.\\\n     2. Retrieve the uploaded file from the request:\\\n        - Assign the uploaded file to a variable called `file`.\\\n     3. Check if the file has no filename:\\\n        - If the filename is empty (`file.filename == ''`):\\\n          - Return an error response with message: \"No selected file\" and HTTP status 400.\\\n     4. Save the uploaded file:\\\n        - Define a folder (`uploads`) to store uploaded files.\\\n        - If the folder doesn't exist, create it (`os.makedirs`).\\\n        - Generate a file path based on the uploaded file's name.\\\n        - Save the file to the defined `UPLOAD_FOLDER` path.\\\n\\\n     5. Extract text from the uploaded file:\\\n        - Call the `extract_text` function, passing the file path to simulate text extraction.\\\n        - For now, this function just reads the file as a string (to be improved later with actual text extraction methods, e.g., PyPDF2, python-docx).\\\n     \\\n     6. Simulate resume analysis:\\\n        - Instead of using a real NLP model (like spaCy), return static data for now.\\\n        - Create a response with the following simulated analysis:\\\n          - `skills`: a static list of skills (`['Python', 'Data Science', 'Machine Learning']`).\\\n          - `job_fit_score`: a static score (`75`).\\\n\\\n     7. Return the simulated analysis result as a JSON response:\\\n        - Send the response back to the user containing the skills and job fit score.\\\n\\\n\n\\fs28 4. Define the Text Extraction Function (`extract_text`)\\\n\n\\fs24    - Simulate text extraction from the uploaded file:\\\n     - Open the file located at `file_path`.\\\n     - Read the file's contents as text and return it.\\\n     - Handle any errors (e.g., file not found or unreadable) and return an error message.\\\n\\\n\n\\fs28 5. Run the Flask Application\\\n\n\\fs24    - Start the Flask application in debug mode when this script is executed directly (`app.run(debug=True)`).\\\n\\\n\\\n\\\n\\\n}"}